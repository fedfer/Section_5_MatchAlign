knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
set.seed(1)
library(tidyverse)
library(infinitefactor)
library(coda)
library(factor.switching)
library(dplyr)
source("helper_fcts.R")
which_data = 'NHANES' # %in% c('NHANES','GrantWhite')
if(which_data=='NHANES'){
df <- readRDS("df_chem.rds")
dim(df)
k <- 25
} else if (which_data=='GrantWhite'){
df <- HolzingerSwineford1939
df <- df[df$school=="Grant-White",]
df <- df %>% select(matches("^x\\d+$"))
dim(df)
k <- 3
} else {
stop("Choose 'which_data' among c('NHANES','Grant-White')")
}
head(df)
is.na(df) %>% mean()
cor_X <- cor(df, use = "pairwise.complete.obs")
res <- eigen(cor_X)
idx_pos <- res$values>0
eig_cumsum <- cumsum(res$values[idx_pos])/sum(res$values[idx_pos])
round( eig_cumsum[k] * 100, 2 )
out <- linearMGSP_NA(log(df) %>% as.matrix() %>% scale(),
nrun = 10000, burn = 5000, thin = 5,
kinit = k, adapt = F, output = "factSamples")
lambdaSamps <- out$lambdaSamps
etaSamps <- out$etaSamps
lambda_fact_switch <- to_fact_switching(lambdaSamps)
start_time <- Sys.time()
wop_ris <- quiet(weighted_procrustes_switching(lambda_mcmc = lambda_fact_switch, verbose = F,))
end_time <- Sys.time()
WOP_time <- end_time - start_time
Lambda_WOP <- to_infinitefact(wop_ris$lambda_reordered_mcmc, k, ncol(df))
WOP_ess <- apply(simplify2array(Lambda_WOP), c(1,2), effectiveSize) %>% mean()
start_time <- Sys.time()
rspFull_ris <- quiet(rsp_full_sa(lambda_mcmc = lambda_fact_switch, sa_loops = 20, verbose = F))
end_time <- Sys.time()
rspFull_time = end_time - start_time
Lambda_rspFull <- to_infinitefact(rspFull_ris$lambda_reordered_mcmc, k, ncol(df))
rspFull_ess <- apply(simplify2array(Lambda_rspFull), c(1,2), effectiveSize) %>% mean()
start_time <- Sys.time()
rspPartial_ris <- quiet(rsp_partial_sa(lambda_mcmc = lambda_fact_switch, sa_loops = 20, verbose = F))
end_time <- Sys.time()
rspPartial_time = end_time - start_time
Lambda_rspPartial <- to_infinitefact(rspPartial_ris$lambda_reordered_mcmc, k, ncol(df))
rspPartial_ess <- apply(simplify2array(Lambda_rspPartial), c(1,2), effectiveSize) %>% mean()
start_time <- Sys.time()
out_MatchAlign <- jointRot_NOnorm(lambdaSamps, etaSamps)
end_time <- Sys.time()
MatchAlign_time = end_time - start_time
Lambda_MatchAlign <- out_MatchAlign$lambda
MAl_ess <- apply(simplify2array(Lambda_MatchAlign), c(1,2), effectiveSize) %>% mean()
# samples
Lambda_LambdaT <- lapply(lambdaSamps, function(x) x %*% t(x))
Lambda_LambdaT_mean <- lmean(Lambda_LambdaT)
# Base line
base_norm <- norm(Lambda_LambdaT_mean, type = "F")
# WOP
Align_cov <- lmean(Lambda_WOP)
Align_cov_mean <- Align_cov %*% t(Align_cov)
WOP_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# RSP-full-SA
Align_cov <- lmean(Lambda_rspFull)
Align_cov_mean <- Align_cov %*% t(Align_cov)
rspFull_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# RSP-partial-SA
Align_cov <- lmean(Lambda_rspPartial)
Align_cov_mean <- Align_cov %*% t(Align_cov)
rspPartial_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# MatchAlign
LambdaAL_mean <- lmean(Lambda_MatchAlign)
Align_cov_mean <- LambdaAL_mean %*% t(LambdaAL_mean)
MatchAlign_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# Unaligned
Align_cov <- lmean(lambdaSamps)
Align_cov_mean <- Align_cov %*% t(Align_cov)
Unaligned_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
print('Runtimes')
round(c(MatchAlign = MatchAlign_time, `RSP-full-SA` = rspFull_time,
`RSP-partial-SA` = rspPartial_time,WOP=WOP_time),3)
print('Absolute Accuracy Metric')
round(c(MatchAlign = MatchAlign_norm, `RSP-full-SA` = rspFull_norm,
`RSP-partial-SA`=rspPartial_norm, WOP=WOP_norm, Unaligned=Unaligned_norm),3)
print('Relative Accuracy Metric')
round(100*c(MatchAlign = MatchAlign_norm, `RSP-full-SA`=rspFull_norm,
`RSP-partial-SA`=rspPartial_norm, WOP=WOP_norm, Unaligned=Unaligned_norm)/base_norm,1)
print('Absolute ESS')
round(c(MatchAlign=MAl_ess, `RSP-full-SA`=rspFull_ess,
`RSP-partial-SA`=rspPartial_ess, WOP=WOP_ess),1)
print('Relative ESS')
round(100*c(MatchAlign=MAl_ess, `RSP-full-SA`=rspFull_ess,
`RSP-partial-SA`=rspPartial_ess, WOP=WOP_ess)/length(lambdaSamps),1)
mLambda_plot <- lmean(Lambda_MatchAlign)
ind_max = apply(mLambda_plot %>% abs(), 1, function(x) which(x == max(x))) %>%
order()
plotmat(mLambda_plot[ind_max,])
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
set.seed(1)
library(tidyverse)
library(infinitefactor)
library(coda)
library(factor.switching)
library(dplyr)
library(lavaan)
source("helper_fcts.R")
which_data = 'GrantWhite' # %in% c('NHANES','GrantWhite')
if(which_data=='NHANES'){
df <- readRDS("df_chem.rds")
dim(df)
k <- 25
} else if (which_data=='GrantWhite'){
df <- HolzingerSwineford1939
df <- df[df$school=="Grant-White",]
df <- df %>% select(matches("^x\\d+$"))
dim(df)
k <- 3
} else {
stop("Choose 'which_data' among c('NHANES','Grant-White')")
}
df[1:10,1:7]
is.na(df) %>% mean()
cor_X <- cor(df, use = "pairwise.complete.obs")
res <- eigen(cor_X)
idx_pos <- res$values>0
eig_cumsum <- cumsum(res$values[idx_pos])/sum(res$values[idx_pos])
round( eig_cumsum[k] * 100, 2 )
out <- linearMGSP_NA(log(df) %>% as.matrix() %>% scale(), verbose = F,
nrun = 10000, burn = 5000, thin = 5,
kinit = k, adapt = F, output = "factSamples")
lambdaSamps <- out$lambdaSamps
etaSamps <- out$etaSamps
lambda_fact_switch <- to_fact_switching(lambdaSamps)
start_time <- Sys.time()
wop_ris <- quiet(weighted_procrustes_switching(lambda_mcmc = lambda_fact_switch, verbose = F,))
end_time <- Sys.time()
WOP_time <- end_time - start_time
Lambda_WOP <- to_infinitefact(wop_ris$lambda_reordered_mcmc, k, ncol(df))
WOP_ess <- apply(simplify2array(Lambda_WOP), c(1,2), effectiveSize) %>% mean()
start_time <- Sys.time()
rspFull_ris <- quiet(rsp_full_sa(lambda_mcmc = lambda_fact_switch, sa_loops = 20, verbose = F))
end_time <- Sys.time()
rspFull_time = end_time - start_time
Lambda_rspFull <- to_infinitefact(rspFull_ris$lambda_reordered_mcmc, k, ncol(df))
rspFull_ess <- apply(simplify2array(Lambda_rspFull), c(1,2), effectiveSize) %>% mean()
start_time <- Sys.time()
rspPartial_ris <- quiet(rsp_partial_sa(lambda_mcmc = lambda_fact_switch, sa_loops = 20, verbose = F))
end_time <- Sys.time()
rspPartial_time = end_time - start_time
Lambda_rspPartial <- to_infinitefact(rspPartial_ris$lambda_reordered_mcmc, k, ncol(df))
rspPartial_ess <- apply(simplify2array(Lambda_rspPartial), c(1,2), effectiveSize) %>% mean()
start_time <- Sys.time()
out_MatchAlign <- jointRot_NOnorm(lambdaSamps, etaSamps)
end_time <- Sys.time()
MatchAlign_time = end_time - start_time
Lambda_MatchAlign <- out_MatchAlign$lambda
MAl_ess <- apply(simplify2array(Lambda_MatchAlign), c(1,2), effectiveSize) %>% mean()
# samples
Lambda_LambdaT <- lapply(lambdaSamps, function(x) x %*% t(x))
Lambda_LambdaT_mean <- lmean(Lambda_LambdaT)
# Base line
base_norm <- norm(Lambda_LambdaT_mean, type = "F")
# WOP
Align_cov <- lmean(Lambda_WOP)
Align_cov_mean <- Align_cov %*% t(Align_cov)
WOP_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# RSP-full-SA
Align_cov <- lmean(Lambda_rspFull)
Align_cov_mean <- Align_cov %*% t(Align_cov)
rspFull_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# RSP-partial-SA
Align_cov <- lmean(Lambda_rspPartial)
Align_cov_mean <- Align_cov %*% t(Align_cov)
rspPartial_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# MatchAlign
LambdaAL_mean <- lmean(Lambda_MatchAlign)
Align_cov_mean <- LambdaAL_mean %*% t(LambdaAL_mean)
MatchAlign_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# Unaligned
Align_cov <- lmean(lambdaSamps)
Align_cov_mean <- Align_cov %*% t(Align_cov)
Unaligned_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
print('Runtimes')
round(c(MatchAlign = MatchAlign_time, `RSP-full-SA` = rspFull_time,
`RSP-partial-SA` = rspPartial_time,WOP=WOP_time),3)
print('Absolute Accuracy Metric')
round(c(MatchAlign = MatchAlign_norm, `RSP-full-SA` = rspFull_norm,
`RSP-partial-SA`=rspPartial_norm, WOP=WOP_norm, Unaligned=Unaligned_norm),3)
print('Relative Accuracy Metric')
round(100*c(MatchAlign = MatchAlign_norm, `RSP-full-SA`=rspFull_norm,
`RSP-partial-SA`=rspPartial_norm, WOP=WOP_norm, Unaligned=Unaligned_norm)/base_norm,1)
print('Absolute ESS')
round(c(MatchAlign=MAl_ess, `RSP-full-SA`=rspFull_ess,
`RSP-partial-SA`=rspPartial_ess, WOP=WOP_ess),1)
print('Relative ESS')
round(100*c(MatchAlign=MAl_ess, `RSP-full-SA`=rspFull_ess,
`RSP-partial-SA`=rspPartial_ess, WOP=WOP_ess)/length(lambdaSamps),1)
mLambda_plot <- lmean(Lambda_MatchAlign)
ind_max = apply(mLambda_plot %>% abs(), 1, function(x) which(x == max(x))) %>%
order()
plotmat(mLambda_plot[ind_max,])
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
set.seed(1)
library(tidyverse)
library(infinitefactor)
library(coda)
library(factor.switching)
library(dplyr)
library(lavaan)
source("helper_fcts.R")
which_data = 'GrantWhite' # %in% c('NHANES','GrantWhite')
if(which_data=='NHANES'){
df <- readRDS("df_chem.rds")
dim(df)
k <- 25
} else if (which_data=='GrantWhite'){
df <- HolzingerSwineford1939
df <- df[df$school=="Grant-White",]
df <- df %>% select(matches("^x\\d+$"))
dim(df)
k <- 3
} else {
stop("Choose 'which_data' among c('NHANES','Grant-White')")
}
df[1:10,1:7]
is.na(df) %>% mean()
cor_X <- cor(df, use = "pairwise.complete.obs")
res <- eigen(cor_X)
idx_pos <- res$values>0
eig_cumsum <- cumsum(res$values[idx_pos])/sum(res$values[idx_pos])
round( eig_cumsum[k] * 100, 2 )
out <- linearMGSP_NA(log(df) %>% as.matrix() %>% scale(), verbose = F,
nrun = 10000, burn = 5000, thin = 5,
kinit = k, adapt = F, output = "factSamples")
lambdaSamps <- out$lambdaSamps
etaSamps <- out$etaSamps
lambda_fact_switch <- to_fact_switching(lambdaSamps)
start_time <- Sys.time()
wop_ris <- quiet(weighted_procrustes_switching(lambda_mcmc = lambda_fact_switch, verbose = F,))
end_time <- Sys.time()
WOP_time <- end_time - start_time
Lambda_WOP <- to_infinitefact(wop_ris$lambda_reordered_mcmc, k, ncol(df))
WOP_ess <- apply(simplify2array(Lambda_WOP), c(1,2), effectiveSize) %>% mean()
start_time <- Sys.time()
rspFull_ris <- quiet(rsp_full_sa(lambda_mcmc = lambda_fact_switch, sa_loops = 20, verbose = F))
end_time <- Sys.time()
rspFull_time = end_time - start_time
Lambda_rspFull <- to_infinitefact(rspFull_ris$lambda_reordered_mcmc, k, ncol(df))
rspFull_ess <- apply(simplify2array(Lambda_rspFull), c(1,2), effectiveSize) %>% mean()
start_time <- Sys.time()
rspPartial_ris <- quiet(rsp_partial_sa(lambda_mcmc = lambda_fact_switch, sa_loops = 20, verbose = F))
end_time <- Sys.time()
rspPartial_time = end_time - start_time
Lambda_rspPartial <- to_infinitefact(rspPartial_ris$lambda_reordered_mcmc, k, ncol(df))
rspPartial_ess <- apply(simplify2array(Lambda_rspPartial), c(1,2), effectiveSize) %>% mean()
start_time <- Sys.time()
out_MatchAlign <- jointRot_NOnorm(lambdaSamps, etaSamps)
end_time <- Sys.time()
MatchAlign_time = end_time - start_time
Lambda_MatchAlign <- out_MatchAlign$lambda
MAl_ess <- apply(simplify2array(Lambda_MatchAlign), c(1,2), effectiveSize) %>% mean()
# samples
Lambda_LambdaT <- lapply(lambdaSamps, function(x) x %*% t(x))
Lambda_LambdaT_mean <- lmean(Lambda_LambdaT)
# Base line
base_norm <- norm(Lambda_LambdaT_mean, type = "F")
# WOP
Align_cov <- lmean(Lambda_WOP)
Align_cov_mean <- Align_cov %*% t(Align_cov)
WOP_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# RSP-full-SA
Align_cov <- lmean(Lambda_rspFull)
Align_cov_mean <- Align_cov %*% t(Align_cov)
rspFull_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# RSP-partial-SA
Align_cov <- lmean(Lambda_rspPartial)
Align_cov_mean <- Align_cov %*% t(Align_cov)
rspPartial_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# MatchAlign
LambdaAL_mean <- lmean(Lambda_MatchAlign)
Align_cov_mean <- LambdaAL_mean %*% t(LambdaAL_mean)
MatchAlign_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
# Unaligned
Align_cov <- lmean(lambdaSamps)
Align_cov_mean <- Align_cov %*% t(Align_cov)
Unaligned_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
print('Runtimes')
round(c(MatchAlign = MatchAlign_time, `RSP-full-SA` = rspFull_time,
`RSP-partial-SA` = rspPartial_time,WOP=WOP_time),3)
print('Absolute Accuracy Metric')
round(c(MatchAlign = MatchAlign_norm, `RSP-full-SA` = rspFull_norm,
`RSP-partial-SA`=rspPartial_norm, WOP=WOP_norm, Unaligned=Unaligned_norm),3)
print('Relative Accuracy Metric')
round(100*c(MatchAlign = MatchAlign_norm, `RSP-full-SA`=rspFull_norm,
`RSP-partial-SA`=rspPartial_norm, WOP=WOP_norm, Unaligned=Unaligned_norm)/base_norm,1)
print('Absolute ESS')
round(c(MatchAlign=MAl_ess, `RSP-full-SA`=rspFull_ess,
`RSP-partial-SA`=rspPartial_ess, WOP=WOP_ess),1)
print('Relative ESS')
round(100*c(MatchAlign=MAl_ess, `RSP-full-SA`=rspFull_ess,
`RSP-partial-SA`=rspPartial_ess, WOP=WOP_ess)/length(lambdaSamps),1)
mLambda_plot <- lmean(Lambda_MatchAlign)
ind_max = apply(mLambda_plot %>% abs(), 1, function(x) which(x == max(x))) %>%
order()
plotmat(mLambda_plot[ind_max,])
start_time <- Sys.time()
rspExact_ris <- quiet(rsp_exact(lambda_mcmc = lambda_fact_switch, verbose = F))
end_time <- Sys.time()
rspExact_time = end_time - start_time
Lambda_rspExact <- to_infinitefact(rspExact_ris$lambda_reordered_mcmc, k, ncol(df))
rspExact_ess <- apply(simplify2array(Lambda_rspExact), c(1,2), effectiveSize) %>% mean()
Align_cov <- lmean(Lambda_rspExact)
Align_cov_mean <- Align_cov %*% t(Align_cov)
rspExact_norm <- norm(Align_cov_mean - Lambda_LambdaT_mean, type = "F")
rspExact_time
rspExact_norm/base_norm
rspExact_ess/length(lambdaSamps)
